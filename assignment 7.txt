assignment 7

1. What is the name of the feature responsible for generating Regex objects?
   - The feature responsible for generating Regex objects is the `re` module in Python.

2. Why do raw strings often appear in Regex objects?
   - Raw strings (prefixed with `r`) are used to avoid escaping backslashes, making regex patterns more readable and easier to manage.

3. What is the return value of the search() method?
   - The `search()` method returns a `Match` object if there is a match, otherwise, it returns `None`.

4. From a Match item how do you get the actual strings that match the pattern?
   - You can use the `group()` method on the `Match` object to retrieve the string that matched the pattern.

5. In the regex created from the `r'(\d\d\d)-(\d\d\d-\d\d\d\d)'` what does group zero cover? Group 2? Group 1?
   - Group 0 refers to the entire match.
   - Group 1 refers to the first set of parentheses `(\d\d\d)`.
   - Group 2 refers to the second set of parentheses `(\d\d\d-\d\d\d\d)`.

6. In standard expression syntax parentheses and intervals have distinct meanings. How can you tell a regex that you want it to fit real parentheses and periods?
   - You can use a backslash to escape these characters, i.e., `\(` and `\)` for parentheses and `\.` for a period.

7. The `findall()` method returns a string list or a list of string tuples. What causes it to return one of the two options?
   - If the regex pattern has groups, `findall()` returns a list of tuples where each tuple represents a match of all groups. If there are no groups, it returns a list of strings.

8. In standard expressions what does the `|` character mean?
   - The `|` character represents an OR operator, meaning it matches either the expression before or after it.

9. In regular expressions what does the `.` character stand for?
   - The `.` character matches any single character except a newline.

10. In regular expressions what is the difference between the `+` and `*` characters?
    - The `+` matches one or more occurrences of the preceding element, while `*` matches zero or more occurrences.

11. What is the difference between `{4}` and `{4,5}` in regular expression?
    - `{4}` matches exactly four occurrences, while `{4,5}` matches between four and five occurrences.

12. What do you mean by the `\d`, `\w`, and `\s` shorthand character classes signify in regular expressions?
    - `\d` matches any digit, `\w` matches any word character (alphanumeric plus underscore), and `\s` matches any whitespace character.

13. What do you mean by `\D`, `\W`, and `\S` shorthand character classes signify in regular expressions?
    - `\D` matches any non-digit character, `\W` matches any non-word character, and `\S` matches any non-whitespace character.

14. What is the difference between `.*?` and `.*`?
    - `.*?` is a non-greedy match, meaning it matches as few characters as possible, while `.*` is greedy, matching as many characters as possible.

15. What is the syntax for matching both numbers and lowercase letters with a character class?
    - The character class would be `[a-z0-9]`.

16. What is the procedure for making a normal expression in regex case insensitive?
    - You can pass the `re.IGNORECASE` (or `re.I`) flag to the `re.compile()` function.

17. What does the `.` character normally match? What does it match if `re.DOTALL` is passed as the second argument in `re.compile()`?
    - Normally, `.` matches any character except a newline. If `re.DOTALL` is passed, it matches any character including newlines.

18. If `numReg = re.compile(r'\d+')`, what will `numRegex.sub('X', '11 drummers 10 pipers five rings 4 hen')` return?
    - It will return `'X drummers X pipers five rings X hen'`.

19. What does passing `re.VERBOSE` as the second argument to `re.compile()` allow to do?
    - It allows you to write regular expressions that are more readable by enabling comments and ignoring whitespace within the pattern.

20. How would you write a regex that matches a number with a comma for every three digits? It must match the following: '42', '1234', '6368745', but not the following: '1234567', '1234'.
    - The regex would be `^\d{1,3}(,\d{3})*$`.

21. How would you write a regex that matches the full name of someone whose last name is Watanabe?
    - The regex would be `^[A-Z][a-zA-Z]+ Watanabe$`.

22. How would you write a regex that matches a sentence where the first word is either Alice, Bob, or Carol; the second word is either eats, pets, or throws; the third word is apples, cats, or baseballs; and the sentence ends with a period?
    - The regex would be `^(Alice|Bob|Carol) (eats|pets|throws) (apples|cats|baseballs)\.$` with the `re.IGNORECASE` flag for case insensitivity.